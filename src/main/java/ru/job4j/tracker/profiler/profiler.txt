1. Установил параметры VM options: -Xmn4m -Xms4m -Xmx4m

2. Запустил приложение

3. С помощью утилиты jps посмотрел PID запущенного приложения: 5204

4. Запустил утилиту jstat с параметрами jstat -gc 5204 10s 100 (Profiler_jstat.png)

	A. Первоначальное состояние
		- Емкость Eden 5 Мб из них использовано 2 Мб. Емкость Old Generation - 3 Мб, неиспользована.
		- Количество сборок мусора minor GC - 0, major GC - 0.

 	B. В приложении выбрал действие Create many items, указал количество объектов 10 000
 		- Емкость Eden уменьшилась и стала 3 Мб, не использована. Емкость Survivor1 стала 1 Мб, из них использовано 709 Кб. Емкость Old Generation увеличилась и стала 4 Мб из них использовано 3 827 Кб.
 		- Количество сборок мусора minor GC - 3, major GC - 0.

 		Приходим к выводу, что память между пространствами распределяется динамически, в зависимости от нужд пространства.

 	C. В приложении снова выбрал действие Create many items, указал количество объектов 10 000
 		- Емкость Eden уменьшилась и стала 2 Мб, не использована. Емкость Survivor1 стала 0 Мб. Емкость Old Generation снова увеличилась и стала 6 Мб из них использовано 5 406 Кб.
 		- Количество сборок мусора minor GC - 5, major GC - 1.

 	D. В приложении выбрал действие Delete all items
 		- Емкость Eden не изменилась. Емкость Survivor1 не изменилась. Емкость Old Generation не изменилась, но количество использованной памяти увеличилось до 6 007 Кб.
 		- Количество сборок мусора minor GC - 6, major GC - 2.

 	E. В приложении выбрал действие Create many items, указал количество объектов 10 000
 		- Емкость Eden увеличилась и стала 4 Мб, из них использовано 1 Мб. Емкость Old Generation уменьшилась и стала 4 Мб из них использовано 3 087 Кб.
 		- Количество сборок мусора minor GC - 7, major GC - 3.

 	F. В приложении выбрал действие Create many items, указал количество объектов 20 000
 		- Возникла ошибка java.lang.OutOfMemoryError: Java heap space (Profiler_OutOfMemoryError.png)

 5. Также до этапа A и после этапа C запускал утилиту jmap с параметрами jmap -histo 5204 (Profiler_jmap_1.png и Profiler_jmap_2.png)
		- Сравнивая два состояния, обнаруживаем, что после добавления 20 000 объектов, в топ объектов по занимаемой памяти добавлись экземпляры классов java.time.LocalDateTime, java.time.LocalDate, java.time.LocalTime, ru.job4j.tracker.Item.
		А также выросло количество объектов byte[] и java.lang.String.



